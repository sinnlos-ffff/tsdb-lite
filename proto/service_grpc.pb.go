// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TsdbLiteClient is the client API for TsdbLite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TsdbLiteClient interface {
	CreateTimeSeries(ctx context.Context, in *CreateTimeSeriesRequest, opts ...grpc.CallOption) (*CreateTimeSeriesResponse, error)
	AddPoint(ctx context.Context, in *AddPointRequest, opts ...grpc.CallOption) (*AddPointResponse, error)
	GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error)
}

type tsdbLiteClient struct {
	cc grpc.ClientConnInterface
}

func NewTsdbLiteClient(cc grpc.ClientConnInterface) TsdbLiteClient {
	return &tsdbLiteClient{cc}
}

func (c *tsdbLiteClient) CreateTimeSeries(ctx context.Context, in *CreateTimeSeriesRequest, opts ...grpc.CallOption) (*CreateTimeSeriesResponse, error) {
	out := new(CreateTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/proto.TsdbLite/CreateTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsdbLiteClient) AddPoint(ctx context.Context, in *AddPointRequest, opts ...grpc.CallOption) (*AddPointResponse, error) {
	out := new(AddPointResponse)
	err := c.cc.Invoke(ctx, "/proto.TsdbLite/AddPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tsdbLiteClient) GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error) {
	out := new(GetRangeResponse)
	err := c.cc.Invoke(ctx, "/proto.TsdbLite/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TsdbLiteServer is the server API for TsdbLite service.
// All implementations must embed UnimplementedTsdbLiteServer
// for forward compatibility
type TsdbLiteServer interface {
	CreateTimeSeries(context.Context, *CreateTimeSeriesRequest) (*CreateTimeSeriesResponse, error)
	AddPoint(context.Context, *AddPointRequest) (*AddPointResponse, error)
	GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error)
	mustEmbedUnimplementedTsdbLiteServer()
}

// UnimplementedTsdbLiteServer must be embedded to have forward compatible implementations.
type UnimplementedTsdbLiteServer struct {
}

func (UnimplementedTsdbLiteServer) CreateTimeSeries(context.Context, *CreateTimeSeriesRequest) (*CreateTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeSeries not implemented")
}
func (UnimplementedTsdbLiteServer) AddPoint(context.Context, *AddPointRequest) (*AddPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPoint not implemented")
}
func (UnimplementedTsdbLiteServer) GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedTsdbLiteServer) mustEmbedUnimplementedTsdbLiteServer() {}

// UnsafeTsdbLiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TsdbLiteServer will
// result in compilation errors.
type UnsafeTsdbLiteServer interface {
	mustEmbedUnimplementedTsdbLiteServer()
}

func RegisterTsdbLiteServer(s grpc.ServiceRegistrar, srv TsdbLiteServer) {
	s.RegisterService(&TsdbLite_ServiceDesc, srv)
}

func _TsdbLite_CreateTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsdbLiteServer).CreateTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TsdbLite/CreateTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsdbLiteServer).CreateTimeSeries(ctx, req.(*CreateTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsdbLite_AddPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsdbLiteServer).AddPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TsdbLite/AddPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsdbLiteServer).AddPoint(ctx, req.(*AddPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TsdbLite_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TsdbLiteServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TsdbLite/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TsdbLiteServer).GetRange(ctx, req.(*GetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TsdbLite_ServiceDesc is the grpc.ServiceDesc for TsdbLite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TsdbLite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TsdbLite",
	HandlerType: (*TsdbLiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimeSeries",
			Handler:    _TsdbLite_CreateTimeSeries_Handler,
		},
		{
			MethodName: "AddPoint",
			Handler:    _TsdbLite_AddPoint_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _TsdbLite_GetRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
